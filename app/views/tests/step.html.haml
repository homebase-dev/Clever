- if @assignation_number == 0
  .page-header
    %h1
      =@question.question_context.category.name
      %small Test
      /%small #{@assignation_number+1}/#{@test.assignations.count}
      
.row
  .col-lg-12
    #timer-placeholder{:style => "position: absolute; right: 2em; top: 2px; font-size: 0.8em;"}
      Zeit?
    #timer{:style => "display: none;"}
    :javascript
      function setCookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays*24*60*60*1000));
        var expires = "expires="+d.toUTCString();
        document.cookie = cname + "=" + cvalue + "; " + expires;
      }
      
      function getCookie(cname) {
          var name = cname + "=";
          var ca = document.cookie.split(';');
          for(var i=0; i<ca.length; i++) {
              var c = ca[i];
              while (c.charAt(0)==' ') c = c.substring(1);
              if (c.indexOf(name) == 0) return c.substring(name.length, c.length);
          }
          return "";
      }
      
      
      $( document ).ready(function() {
        var timer = $('#timer');
        var timer_placeholder = $('#timer-placeholder');
        
        var isTimerOn = getCookie("isTimerOn");
        if(!isTimerOn || isTimerOn === "true") {
          timer_placeholder.hide();
          timer.show();
        } else {
          timer.hide();
          timer_placeholder.show();
        }
        
        timer.timer({
          seconds: "#{@timer_elapsed_seconds}"
        })
        
        timer_placeholder.click(function (event) {
          setCookie("isTimerOn", true, 365);
          timer_placeholder.hide();
          timer.show();
        });
        
        timer.click(function (event) {
          setCookie("isTimerOn", false, 365);
          timer.hide();
          timer_placeholder.show();
        });
      });
      
      
      function showContext() {
        console.log("showContext()...");
        var context = $("#context_#{@question.id}");
        context.show();
      }
      
      function hideContext() {
        console.log("hideContext()...");
        var context = $("#context_#{@question.id}");
        context.hide();
      }
      
      function addContextButtonListener() {
        $("#show_context_button").click(function (event) {
            var context = $("#context_#{@question.id}");
            
            if(context.is(":visible")) {
              context.hide();
              $(this).text("Zeige Kontext");
            } else {
              context.show();
              $(this).text("Verberge Kontext");
            }
            event.preventDefault(); // Prevent link from following its href
          });
      }
      
      function contextDidChange() {
        console.log("contextDidChange()...");
        $("#question_#{@question.id}").hide();
        
        $('.first-question').click(function (event) {
          $("#context_#{@question.id}").hide();
          $("#question_#{@question.id}").show();   
          $("#show_context_button").show();  
          event.preventDefault(); // Prevent link from following its href
        });
        
        $('.first-question-only-begin').click(function (event) {
          $("#context_#{@question.id}").hide();
          $("#question_#{@question.id}").show();   
          event.preventDefault(); // Prevent link from following its href
        });
      }
      

      
      function showContextButton() {
        console.log("show context button");
        $("#show_context_button").show();    
      }
      
      function showQuestion() {
        console.log("showQuestion");
        var question = $("#question_#{@question.id}");
        question.show();
      }
      
      function hideQuestion() {
        console.log("hideQuestion");
        var question = $("#question_#{@question.id}");
        question.hide();
      }
      

    .progress.flat-corners
      .progress-bar.progress-bar{"aria-valuemax" => "100", "aria-valuemin" => "0", "aria-valuenow" => "#{((@assignation_number+1)*100) / @test.assignations.count}", :role => "progressbar", :style => "width: #{((@assignation_number+1)*100) / @test.assignations.count}%"}
        %span #{@assignation_number+1}/#{@test.assignations.count}
      
    %a.btn.btn-default.btn-xs.pull-right{:href => "#", :role => "button", :id => "show_context_button", :style => "margin-bottom: 0.5em; display: none;"} Zeige Kontext
    :javascript
        console.log(#{@show_context});
        console.log(#{@did_context_change});
        
        
    /TODO render context, set display to hide from beginning
    -if @show_context
      -if @workflow.always_visible?
        = render "tests/contexts/context_always_visible"
        :javascript
          $( document ).ready(function() {
            addContextButtonListener();
          });
      -else
        = render "tests/contexts/context_visible_only_at_beginning"
         
    
    /then decide to hide or show
    
    -if @show_context && @did_context_change
      -if @workflow.always_visible?
        :javascript
          $( document ).ready(function() {
            hideQuestion();
          });
    -else
      -if @workflow.always_visible?
        :javascript
          console.log("fall 3");
          $( document ).ready(function() {
            hideContext();
            showContextButton();
          });
              
                
              
              
              
              
.row{:"data-no-turbolink" => true}
  .col-lg-12
    .question-box{:id => "question_#{@question.id}"}
      .panel.panel-primary.flat-corners
        .panel-heading.flat-corners
          %h3.panel-title Frage
        .panel-body.scale-images
          =preview_html_field(@question.text)
      - @question.answers.each_with_index do |answer, index|
        %ul.list-group.no-bottom-margin
          / test_step_path(:id => @test, :question_number => @question_number+2)
          = link_to "#", :onclick => "return false;", :class=> "list-group-item no-boarder" do 
            .answer{:id => "answer-#{answer.id}"}
              .answer-badge-q3
                -if @assignation.answer_checked?(answer)
                  %i.fa.fa-check-square-o
                - else
                  %i.fa.fa-square-o
                / %span.glyphicon.glyphicon-unchecked{"aria-hidden" => "true"}
                =answer_char(index)
                / =index_2
            .answer-text=preview_html_field(answer.text)
            
      .row{:style => "margin-top: 20px;"}
        .col-xs-5
          - if @assignation_number > 0
            %a.btn.btn-default.pull-left.full-width.flat-corners{:href => test_step_path(:id => @test, :assignation_number => @assignation_number), :role => "button"} ZurÃ¼ck
        .col-xs-2
        .col-xs-5
          %a.btn.btn-default.pull-right.full-width.flat-corners{:id => 'next-link', :href => "#", :role => "button"} Weiter
          / test_step_path(:id => @test, :question_number => @question_number+2)

-if @question.question_context.category.single_question_select?
  :javascript
    $('.list-group-item').click(function() {
      var checkbox = $(this).find('i.fa');
      
      //uncheck all previous checked answers
      $(".fa-check-square-o").each(function( index ) {
        $(this).removeClass('fa-check-square-o');
        $(this).addClass('fa-square-o');
      });
      
      //check the clicked one
      if(checkbox.hasClass('fa-square-o')) {
        checkbox.removeClass('fa-square-o');
        checkbox.addClass('fa-check-square-o');
      } else {
        checkbox.addClass('fa-square-o');
        checkbox.removeClass('fa-check-square-o');
      }
      
      return false;
    });
    

    
    function getCheckedAnswersParam() {
      var checked_answer_ids= new Array();
      console.info('looking for selected');
      $(".fa-check-square-o").each(function( index ) {
        console.info( "found" );
        var id = $(this).closest('.answer').attr('id');
        checked_answer_ids.push(id);
      });
      
      var checked_answer_param = "";
      jQuery.each(checked_answer_ids, function(index, checked_answer) {
        checked_answer_param += "ca%5B%5D="+checked_answer.replace('answer-','')+"&";
      });
      
      console.info(checked_answer_ids);
      
      return checked_answer_param;
    }
    
    $('a#next-link').on('click', function() {
      var checked_answer_param = getCheckedAnswersParam();
      console.info(checked_answer_param)
      this.href = "/tests/"+"#{@test.id}"+"/step/"+"#{@assignation_number+2}?"+checked_answer_param;
    });
- else
  :javascript
    $('.list-group-item').click(function() {
      var checkbox = $(this).find('i.fa');
      
      if(checkbox.hasClass('fa-square-o')) {
        checkbox.removeClass('fa-square-o');
        checkbox.addClass('fa-check-square-o');
      } else {
        checkbox.addClass('fa-square-o');
        checkbox.removeClass('fa-check-square-o');
      }
      
      return false;
    });
    
    
    
    
    function getCheckedAnswersParam() {
      var checked_answer_ids= new Array();
      console.info('looking for selected');
      $(".fa-check-square-o").each(function( index ) {
        console.info( "found" );
        var id = $(this).closest('.answer').attr('id');
        checked_answer_ids.push(id);
      });
      
      var checked_answer_param = "";
      jQuery.each(checked_answer_ids, function(index, checked_answer) {
        checked_answer_param += "ca%5B%5D="+checked_answer.replace('answer-','')+"&";
      });
      
      console.info(checked_answer_ids);
      
      return checked_answer_param;
    }
    
    $('a#next-link').on('click', function() {
      var checked_answer_param = getCheckedAnswersParam();
      console.info(checked_answer_param)
      this.href = "/tests/"+"#{@test.id}"+"/step/"+"#{@assignation_number+2}?"+checked_answer_param;
    });

